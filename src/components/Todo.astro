---
import { todosModel } from "../models/todos";

const allTodos = await todosModel.getTodos();
---

<pre>{JSON.stringify(allTodos, null, 2)}</pre>

<form action="/api/todo/create-todo" method="post">
  title: <input type="text" name="title" />
  <button type="submit">create</button>
</form>
<ul>
  {
    allTodos.map((todo) => (
      <li class="todo">
        <form action="/api/todo/toggle-todo" method="post">
          <input type="hidden" name="id" value={todo.id} />
          <button>{todo.done ? "done" : "not done"}</button>
        </form>

        {todo.title}

        <form action="/api/todo/delete-todo" method="post">
          <input type="hidden" name="id" value={todo.id} />
          <button>delete</button>
        </form>
      </li>
    ))
  }
</ul>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }

  .todo {
    display: flex;
  }
</style>
